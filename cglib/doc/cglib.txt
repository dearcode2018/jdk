





cglib (Code Generation Library) 动态字节码生成库
cglib 基于asm，在运行时动态生成一个被代理类的子类，若目标类为
final类，则无法使用cglib进行代理，可以通过jdk接口的方式进行代理.

1) ClassLoader类加载器
类加载器根据需要负责把类载入内存，ClassLoader提供代码加载，并把 [字节码] 反射 成对象实例.
2) bytecode字节码


3) asm


代理模式
1) 代理类和委托类持有相同的接口，代理类主要负责为委托类预处理消息(前置处理)、过滤消息、传递消息、后置处理.
2) 代理类的对象和委托类的对象关联，代理类的对象并不真正实现服务，而是通过调用委托类的对象的方法，来提供特定的服务.
3) 按照代理的创建时期，代理类分为两种: 静态代理、动态代理.
静态代理: 由程序员创建或特定工具自动生成源代码，再对其进行编译，在程序运行之前，代理类的.class文件就已经存在了.

动态代理: 在程序运行时，运用反射机制动态创建而成.

4) 代理就是对委托对象进行一些列的前置后置、拦截过滤等处理，静态和动态区别就在于静态是预先存在的，而动态则是在
运行时用反射动态生成的.

5) cglib 代理原理: 继承非final的目标类，并覆盖其中方法实现增强，需要cglib代理的类不能声明为final.

















